name: CD

on:
  push:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: prepare flake
        run: |
          python -m pip install --upgrade pip
          pip install flake8==7.1.1 flake8-isort==6.1.1

      - name: run flake
        run: python -m flake8 --extend-exclude .venv,migrations backend

  push_backend_image:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Push backend to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/kittygram_backend:latest

  push_frontend_image:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Push frontend to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/kittygram_frontend:latest

  push_gateway_image:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Push gateway to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/kittygram_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs: 
      - push_backend_image
      - push_frontend_image
      - push_gateway_image
    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: Deliver configuration files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          source: "docker-compose.production.yml"
          target: "/home/user/kittygram"

      - name: Pull and restart containers
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            docker compose -f /home/user/kittygram/docker-compose.production.yml pull
            docker compose -f /home/user/kittygram/docker-compose.production.yml down || true
            docker compose -f /home/user/kittygram/docker-compose.production.yml up -d
            docker compose -f /home/user/kittygram/docker-compose.production.yml exec backend python manage.py migrate
            docker compose -f /home/user/kittygram/docker-compose.production.yml exec backend python manage.py collectstatic --no-input

  tests:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: install deps
        run: |
          python -m pip install --upgrade pip 
          pip install -r ./backend/requirements.txt 

      - name: run tests
        run: python -m pytest    

  telegramm-notify:
    runs-on: ubuntu-latest
    needs:
      - tests
    steps:
      - name: Notify via telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAMM_CHAT_ID }}
          token: ${{ secrets.TELEGRAMM_TOKEN }}
          message: |
            ${{ github.actor }} created commit:
            Commit message: ${{ github.event.commits[0].message }}
            ---
            Repository: ${{ github.repository }}
            Link: https://github.com/${{ github.repository }}/commit/${{github.sha}}    
